% Длина списка
% (список, длина)
list_length([], 0).
list_length([_|L], N):-list_length(L, M), N is M + 1.

% Принадлежность элемента списку
% (элемент, список)
member(X, [X|_]).
member(X, [_|T]):-member(X, T).

% Конкатeнация списков
% (список1, список2, список1+2)
append([], L, L).
append([X|L1], L2, [X|L3]):-append(L1, L2, L3).

% Удаление элемента из списка
% (элемент, список, список без элемента)
remove(X, [X|T], T).
remove(X, [Y|T], [Y|Z]):-remove(X, T, Z).

% Перестановки элементов в списке
% (список, перестановка)
permute([], []).
permute(L, [X|T]):-remove(X, L, Y), permute(Y, T).

% Подсписки списка
% (подсписок, список)
sublist(S, L):-append(_, L1, L), append(S, _, L1).

% Без использования стандартных предикатов
% Реверсирование списка 
% (список, обратный список, временный обратный список ( [] ) )
reverse([],Z,Z).
 reverse([H|T],Z,Acc) :- reverse(T,Z,[H|Acc]).

% С использованиям стандартных предикатов
reverse_std([],Z,Z).
 reverse_std([H|T],Z,Acc) :- append([H], Acc, L1), reverse_std(T, Z, L1).

% Максимальный элемент в списке
% (список, элемент)
max([X], X).
max([X|Y], X):-
    max(Y, M), X >= M.
max([X|Y], Z):-
    max(Y, Z), X < Z.

% Пример совместного использования предикатов
% Сортировка списка 
% (список, отсортированный список, временный отсортированный список ( [] ) )
sort([], L, L).
sort(L1, C, L2):-
    max(L1, M), remove(M, L1, L3), sort(L3, C, [M|L2]).